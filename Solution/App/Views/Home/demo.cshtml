@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "测试页面";
}
<script src="~/Scripts/xlsx/xlsx.full.min.js"></script>
<div id="app">
    <el-upload class="upload-demo"
               drag
               action="/Home/GetData"
               v-bind:on-success="success"
               v-bind:show-file-list="false">
        <i class="el-icon-upload"></i>
        <div class="el-upload__text">将文件拖到此处，或<em>点击上传</em></div>
    </el-upload>
    <el-upload action="/Home/Upload"
               v-bind:before-upload="beforeUpload"
               multiple
               v-bind:file-list="fileList">
        <el-button size="small" type="primary">点击上传</el-button>
    </el-upload>

    <el-button size="small" type="primary" v-on:click="save">保存</el-button>
    <el-table v-bind:data="results" border style="width:100%;margin-top:20px;">
        <el-table-column v-for="item of headers" v-bind:prop="item"  v-bind:label="item"  v-bind:key="item">
        </el-table-column>
    </el-table>
</div>



<script>
    new Vue({
        el: '#app',
        data: {
            uploadForm: new FormData(),   // 一个formdata
            fileList:[],
            results: null,
            headers:null
        },
        mounted: function () {

        },
        methods: {
            beforeUpload: function (file) {
                debugger
                this.uploadForm.append('file[]', file)
            },
            save: function () {
                debugger
                //formData = new FormData()
                //for (var i = 0; i < this.fileList.length; i++) {
                //    formData.append('file[]', this.fileList[i])
                //}
                this.uploadForm.append('s', "sssss")

                axios.post("/Home/Save", this.uploadForm)
                  .then(function (response) {

                  }.bind(this))
                  .catch(function (error) {
                      console.log(error);
                  });
            },
            success: function (response, file, fileList) {
                debugger
                var reader = new FileReader();
                reader.onload = function (e) {
                    debugger
                    var data = e.target.result;
                    var fixdata = this.fixData(data)
                    var workbook = XLSX.read(btoa(fixdata), { type: 'base64' })
                    var firstSheetName = workbook.SheetNames[0]
                    var worksheet = workbook.Sheets[firstSheetName]
                    var results = XLSX.utils.sheet_to_json(worksheet)
                    var headers = this.getHeader(worksheet)
                    this.headers = headers
                    this.results = results
                }.bind(this)
                reader.readAsArrayBuffer(file.raw)
            },
            fixData: function (data) { //文件流转BinaryString
                var o = ""
                var l = 0
                var w = 10240
                for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));
                o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));
                return o;
            },
            getHeader: function (sheet) {
                var headers = []
                var range = XLSX.utils.decode_range(sheet['!ref'])
                var C;
                var R = range.s.r
                for (C = range.s.c; C <= range.e.c; ++C) {
                    var cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]
                    var hdr = 'UNKNOWN' + C
                    if (cell && cell.t) {
                        hdr = XLSX.utils.format_cell(cell)
                    }
                    headers.push(hdr)
                }
                return headers
            }
        }

    });
</script>

<style scoped>

</style>